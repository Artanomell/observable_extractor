#!/usr/bin/env python


# Copyright 2015 Soltra Solutions, LLC

# Licensed under the Soltra License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.

# You may obtain a copy of the License at
# http://www.soltra.com/licenses/license-2.0.txt

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,

# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.

# See the License for the specific language governing permissions and
# limitations under the License.


from cStringIO import StringIO
from cybox.common import Hash
from cybox.core import Observables
from cybox.core.observable import Observable, ObservableComposition
from cybox.objects.address_object import Address
from cybox.objects.file_object import File
from cybox.objects.uri_object import URI
from cybox.utils import Namespace
from cybox.utils import set_id_namespace as set_cybox_id_namespace
from docopt import docopt
from docx import Document as docx_doc
from miette import DocReader as doc_doc
from mimetypes import guess_type
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.pdfpage import PDFPage
from stix.core import STIXPackage, STIXHeader
from stix.indicator import Indicator
from stix.utils import set_id_namespace as set_stix_id_namespace
import re
import xlrd 


__version__ = '0.2'

__doc__ = """observable_extractor: extract IOCs from .xls(x), .doc(x), pdf, txt, csv and output .csv or STIX

Usage: observable_extractor [options]

Options:
    -i INPUT, --input=INPUT           Specify input file
    -o OUTPUT, --output=OUTPUT        Specify output file [prints to stdout, if not specified]
    -f FORMAT, --format=FORMAT        Specify output format [stix, csv]
    -h, --help                        Print usage message
    -v, --version                     Print version
"""


def pdf_to_txt(file_):
    '''convert a pdf to text'''
    rsrcmgr = PDFResourceManager()
    retstr = StringIO()
    codec = 'utf-8'
    laparams = LAParams()
    device = TextConverter(rsrcmgr, retstr, codec=codec, laparams=laparams)
    fp = file(file_, 'rb')
    interpreter = PDFPageInterpreter(rsrcmgr, device)
    password = ""
    maxpages = 0
    caching = True
    pagenos=set()
    for page in PDFPage.get_pages(fp, pagenos, maxpages=maxpages, password=password, caching=caching, check_extractable=True):
        interpreter.process_page(page)
    txt = retstr.getvalue()
    fp.close()
    device.close()
    retstr.close()
    return(txt)


def excel_to_txt(file_):
    '''convert an excel to text'''
    book = xlrd.open_workbook(file_)
    txt = str()
    i = 0
    while i < book.nsheets:
        sheet = book.sheet_by_index(i)
        row = 0
        while row < sheet.nrows:
            line = str()
            col = 0
            while col < sheet.ncols:
                line += sheet.cell(row, col).value + ' '
                col += 1
            txt += line + '\n'
            row += 1
        i += 1
    return(txt)


def docx_to_txt(file_):
    '''convert .docx to text'''
    docx = docx_doc(file_)
    txt = str()
    for i in docx.paragraphs:
        txt += ' ' + i.text.encode('utf-8')
    return(txt)


def doc_to_txt(file_):
    '''convert .doc to text'''
    doc = doc_doc(file_)
    # fix carriage returns
    txt = re.sub(r'\r', r'\r\n', doc.read())
    return(txt)


def observables_from_txt(txt):
    '''extract observables from text'''
    observables = {}
    observables['sha512'] = set()
    for sha512 in re.findall(r'\b[0-9a-f]{128}\b', txt, re.IGNORECASE):
        observables['sha512'].add(sha512)
    observables['sha256'] = set()
    for sha256 in re.findall(r'\b[0-9a-f]{64}\b', txt, re.IGNORECASE):
        observables['sha256'].add(sha256)
    observables['sha1'] = set()
    for sha1 in re.findall(r'\b[0-9a-f]{40}\b', txt, re.IGNORECASE):
        observables['sha1'].add(sha1)
    observables['md5'] = set()
    for md5 in re.findall(r'\b[0-9a-f]{32}\b', txt, re.IGNORECASE):
        observables['md5'].add(md5)
    observables['ip'] = set()
    for ip in re.findall(r'\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b', txt, re.IGNORECASE):
        observables['ip'].add(ip)
    observables['url'] = set()
    for url in re.findall(r'\b(http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)\b', txt, re.IGNORECASE):
        observables['url'].add(url)
    return(observables)


def extract_observables(file_):
    '''takes a filepath, returns a dict of observables or None'''
    filetype = guess_type(file_)[0]
    if filetype in ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']:
        return observables_from_txt(excel_to_txt(file_))
    elif filetype in ['application/vnd.openxmlformats-officedocument.wordprocessingml.document']:
        return observables_from_txt(docx_to_txt(file_))
    elif filetype in ['application/msword']:
        return observables_from_txt(doc_to_txt(file_))
    elif filetype in ['application/pdf']:
        return observables_from_txt(pdf_to_txt(file_))
    elif filetype in ['text/plain', 'text/csv']:
        txt_file = open(file_)
        txt = txt_file.read()
        txt_file.close
        return observables_from_txt(txt)
    else: 
        return None


def observables_to_csv(observables):
    '''takes a dict of observables, returns csv'''
    str_ = 'observable_type,observable_value\n'
    for k, v in observables.items():
        if v:
            for i in v:
                str_ += "%s,%s\n" % (k, i)
    return str_


def observables_to_stix(observables, title):
    '''takes a dict of observables, returns stix'''
    xmlns_url = 'https://github.com/soltra/observable_extractor/'
    xmlns_name = 'soltra_observable_extractor'
    set_stix_id_namespace({xmlns_url: xmlns_name})
    set_cybox_id_namespace(Namespace(xmlns_url, xmlns_name))
    stix_package = STIXPackage()
    stix_header = STIXHeader()
    stix_package.stix_header = stix_header
    observable_ids = list()
    for k, v in observables.items():
        if v:
            for i in v:
                if k == 'ip':
                    addr = Address(address_value=i, category='ipv4-addr')
                    addr.condition = 'Equals'
                    observable_ = Observable(addr)
                    observable_ids.append(observable_.id_)
                    stix_package.add_observable(observable_)
                elif k == 'url':
                    url = URI()
                    url.type_ = 'URL'
                    url.value = i
                    url.condition = 'Equals'
                    observable_ = Observable(url)
                    observable_ids.append(observable_.id_)
                    stix_package.add_observable(observable_)
                elif k in ['sha512', 'sha256', 'sha1', 'md5']:
                    file_object = File()
                    file_object.add_hash(Hash(i, type_=k.upper()))
                    for j in file_object.hashes:
                        j.simple_hash_value.condition = "Equals"
                    observable_ = Observable(file_object)
                    observable_ids.append(observable_.id_)
                    stix_package.add_observable(observable_)
                else:
                    pass
    indicator_ = Indicator()
    indicator_.title = title
    indicator_.description = title
    indicator_.confidence = 'Unknown'
    indicator_.add_indicator_type('Malware Artifacts')
    observable_composition_ = ObservableComposition()
    observable_composition_.operator = 'OR'
    for observable_id in observable_ids:
        observable_ = Observable()
        observable_.idref = observable_id
        observable_composition_.add(observable_)
    indicator_.observable = Observable()
    indicator_.observable.observable_composition = observable_composition_
    stix_package.add_indicator(indicator_)
    return stix_package


if __name__ == '__main__':
    args = docopt(__doc__)
    input_ = args['--input']
    output_ = args['--output']
    # default to stix output if format not specified...
    if not args['--format']:
        format_ = 'stix'
    else:
        format_ = args['--format']
    observables = extract_observables(input_)
    if observables:
        if format_ == 'csv':
            cooked_output = observables_to_csv(observables)
        elif format_ == 'stix':
            raw_output = observables_to_stix(observables, title="IOCs extracted from %s via observable_extractor" % (input_))
            cooked_output = raw_output.to_xml(pretty=True)
        if not output_:
            print(cooked_output)
        else:
            file_ = open(output_, 'w')
            file_.write(cooked_output)
            file_.close()
